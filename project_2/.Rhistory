up = x[i,j] == x[i,j-1]
down = x[i,j] == x[i,j+1]
indicator = right + up + down
}
else if (i == nrows) {
left = x[i,j] == x[i-1,j]
up = x[i,j] == x[i,j-1]
down = x[i,j] == x[i,j+1]
indicator = left + up + down
}
else if (j == 1) {
right = x[i,j] == x[i+1,j]
left = x[i,j] == x[i-1,j]
down = x[i,j] == x[i,j+1]
indicator = right + left + down
}
else if (j == ncolumns) {
right = x[i,j] == x[i+1,j]
left = x[i,j] == x[i-1,j]
up = x[i,j] == x[i,j-1]
indicator = right + left + up
}
return(indicator)
}
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
# Count number of 0s or ones in x
# and return sum of corresponding values in y
fcount <- function(x, y, bool){
nrows <- dim(x)[1]
ncols <- dim(x)[2]
count <- 0
yval = 0
for (i in 1:nrows){
for(j in 1:ncols){
if (x[i,j] == bool){
count <- count + 1
yval[count] <- y[i,j]
}
}
}
ysum <- sum(yval)
res <- data.frame(count, ysum)
return(res)
}
# b) For mu_0
res0 <- fcount(x,y,0)
N_0 <- res0$count
ysum0 <- res0$ysum
mu0_old <- mu_0
## Acceptance probability
# ---- Utilities --- #
ftheta <- function(mu_0, mu_1, sigma_0, sigma_1){
if (sigma_0 <= sigma_1 && mu_0 < mu_1){
res <- (((mu_1-mu_0)^3)/(sigma_0^3*sigma_1^2))*exp(-(((mu_1-mu_0)/(sqrt(sigma_0*sigma_1)))+sqrt(sigma_1/sigma_0)))
}
else if (sigma_0 > sigma_1 && mu_0 < mu_1){
res <- (((mu_1-mu_0)^3)/(sigma_0^2*sigma_1^3))*exp(-(((mu_1-mu_0)/(sqrt(sigma_0*sigma_1)))+sqrt(sigma_1/sigma_0)))
}
return(res)
}
fygivenxphi <- function(val, mu, sigma){
return(dnorm(val, mu, sigma))
}
# --- Main---- #
muzero <- function(N_0, ysum0, sigma_0, mu0_old){
# Propose random new mu0
mu0_new <- rnorm(1, ysum0/N_0, sqrt((sigma_0^2)/N_0))
Q_old <- dnorm(mu0_old, ysum0/N_0, sqrt((sigma_0^2)/N_0), log = TRUE)
Q_new <- dnorm(mu0_new, ysum0/N_0, sqrt((sigma_0^2)/N_0), log = TRUE)
f_old <- log(ftheta(mu0_old, mu_1, sigma_0, sigma_1)*fygivenxphi(mu0_old, mu_0, sigma_0))
f_new <- log(ftheta(mu0_new, mu_1, sigma_0, sigma_1)*fygivenxphi(mu0_new, mu_0, sigma_0))
# NB: Ratio on log scale
ratio <- (f_new*Q_old)/(f_old*Q_new)
acc <- min(0, ratio) # on log scale
u <- log(runif(1))
if (u < acc){
res <- mu0_new
} else {
res <- mu0_new
}
return(res)
}
test0 <- muzero(N_0, ysum0, sigma_0, mu0_old)
test0
# For mu_1
res <- fcount(x,y,1)
N_1 <- res$count
ysum1 <- res$ysum
mu1_old <- mu_1
muone <- function(N_1, ysum1, sigma_1, mu1_old){
# Propose random new mu0
mu1_new <- rnorm(1, ysum1/N_1, sqrt((sigma_1^2)/N_1))
Q_old <- dnorm(mu1_old, ysum1/N_1, sqrt((sigma_1^2)/N_1), log = TRUE)
Q_new <-dnorm(mu1_new, ysum1/N_1,sqrt((sigma_1^2)/N_1), log = TRUE)
f_old <- log(ftheta(mu_0, mu1_old,sigma_0, sigma_1)*fygivenxphi(mu1_old, mu_1, sigma_1))
f_new <-  log(ftheta(mu_0, mu1_new,sigma_0, sigma_1)*fygivenxphi(mu1_new, mu_1, sigma_1))
# NB: Ratio on log scale
ratio <- (f_new*Q_old)/(f_old*Q_new)
acc <- min(0, ratio) # on log scale
u <- log(runif(1))
if (u < acc){
res <- mu1_new
} else {
res <- mu1_new
}
return(res)
}
test1 <- muone(N_1, ysum1, sigma_1, mu1_old)
test1
?structure
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
image(z = x)
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
oldimage <- image(z = x)
oldimage
plot(oldimage)
image(z = x)
oldimage
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
image(z = x)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_upd <- x_update(1000)
x_upd <- x_update(10)
image(z = x_upd)
x_upd <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_upd <- x_update(10)
image(z = x_upd)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x)
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_upd <- x_update(1)
image(z = x_upd)
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_upd <- x_update(1)
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
x_update <- function(times){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
}
x_update <- function(times, x, sigma_0, sigma_1, mu_0, mu_1, beta){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
return()
}
x_upd <- x_update(10, x, sigma_0, sigma_1, mu_0, mu_1, beta)
image(z = x)
x_upd <- x_update(10, x, sigma_0, sigma_1, mu_0, mu_1, beta)
image(z = x_upd)
y = read.table("./image.txt", header = FALSE, sep = " ")
nrows = dim(y)[1]
ncolumns = dim(y)[2]
sigma_0 = 0.5
sigma_1 = 0.5
mu_0 = -1
mu_1 = 2
beta = 1
x = matrix(rbinom(nrows * ncolumns, 1, 0.5), ncol = ncolumns, nrow = nrows)
image(z = x)
x_update <- function(times, x, sigma_0, sigma_1, mu_0, mu_1, beta){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
print(x)
}
}
return(x)
}
x_upd <- x_update(10, x, sigma_0, sigma_1, mu_0, mu_1, beta)
x_upd <- x_update(10, x, sigma_0, sigma_1, mu_0, mu_1, beta)
x_update <- function(times, x, sigma_0, sigma_1, mu_0, mu_1, beta){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
return(x)
}
x_upd <- x_update(10, x, sigma_0, sigma_1, mu_0, mu_1, beta)
image(z = x_upd)
x_upd <- x_update(1000, x, sigma_0, sigma_1, mu_0, mu_1, beta)
x_upd <- x_update(1000, x, sigma_0, sigma_1, mu_0, mu_1, beta)
x_upd <- x_update(1000, x, sigma_0, sigma_1, mu_0, mu_1, beta)
image(z = x_upd)
image(z = x)
image(z = x_upd)
check <- (x == x_upd)
check
check <- sum(x != x_upd)
check
x_update <- function(times, x, mu_0, mu_1, sigma_0, sigma_1,beta){
for (it in 1:times){
i = ceiling(nrows*runif(1))
j = ceiling(ncolumns*runif(1))
x_prop = 1 - x[i,j]
x_new = x
x_new[i,j] = x_prop
I = x_prior(x) # No. of neeighbours
I_prop = x_prior(x_new)
ising = exp(beta*(I_prop-I))
if (x[i,j] == 0) {
normal = sigma_0/sigma_1 * exp(-1/(2*sigma_1^2)*(y[i,j]-mu_1)^2 + 1/(2*sigma_0)*(y[i,j]-mu_0)^2)
}
if(x[i,j] == 1){
normal = sigma_1/sigma_0 * exp(-1/(2*sigma_0^2)*(y[i,j]-mu_0)^2 + 1/(2*sigma_1)*(y[i,j]-mu_1)^2)
}
fratio = normal * ising
alpha = min(1,fratio)
u = runif(1)
if (u < alpha) {
x[i,j] = x_prop
}
}
return(x)
}
