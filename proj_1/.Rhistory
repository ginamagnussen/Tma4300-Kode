}
for (j in 1:K) {
dirMean[j] <- mean(dirSample[j,])
}
xUni <- seq(0,1,1/n)
betaSamples_1 <- dbeta(xUni, alpha[1], sum(alpha)-alpha[1])
betaSamples_2 <- dbeta(xUni, alpha[2], sum(alpha)-alpha[2])
betaSamples_3 <- dbeta(xUni, alpha[3], sum(alpha)-alpha[3])
betaSamples_4 <- dbeta(xUni, alpha[4], sum(alpha)-alpha[4])
truehist(dirSample[,1])
lines(xUni, betaSamples_1, col = "red", lwd = 2)
truehist(dirSample[,1], main ="Marginal posterior distribution, q_1")
truehist(dirSample[,1], main ="Marginal posterior distribution, $q_1$")
xlab = ""
truehist(dirSample[,1], main ="Marginal posterior distribution of q_2", xlab = "")
par(mfrow=c(2,2))
truehist(dirSample[,1], main ="Marginal posterior distribution of q_1", xlab = "")
lines(xUni, betaSamples_1, col = "red", lwd = 2)
rm(list = ls())
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE)
library(MASS)
library(ggplot2)
library(gridExtra)
# #------Probability integral transform--------#
# Initialize
n <- 100000
alpha <- 0.5
x <- sort(runif(n,0.01,8))
# Functions and sampling
gsample <- function(n,alpha){
c <- (exp(1)*alpha)/(exp(1)+alpha)
u <- runif(n)
x1 <- (u*(alpha/c))^(1/alpha)
x2 <- -log((1/alpha+1/(exp(1))-u/c))
x <- matrix(0,n,1)
for (i in 1:n){
if(u[i]>= (c/alpha)){
x[i] <- x2[i]
}
else {
x[i] <- x1[i]
}
}
return(x)
}
xsample2 <- gsample(n, alpha)
# Check sampling
gfunc <- matrix(0,n,1)
for (i in 1:n){
if(x[i] <= 0){
gfunc[i] <- 0
}
else if (x[i] < 1) {
gfunc[i] <- ((exp(1)*alpha)/(exp(1)+alpha))*(x[i]^(alpha-1))
}
else {
gfunc[i] <- ((exp(1)*alpha)/(exp(1)+alpha))*exp(-x[i])
}
}
# Plot
dataf <- data.frame(x, gfunc, xsample2)
truehist(xsample2, xlab = "Samples of g(x), alpha = 0.5",main = "Probability integral transform", xlim = range(0:3), cex.main = 1, cex.lab = 1)
lines(x,gfunc, col = "red", lwd = 3)
# Plot
dataf <- data.frame(x, gfunc, xsample2)
truehist(xsample2, xlab = "Samples of g(x), alpha = 0.5",main = "Probability integral transform", xlim = range(0:2), cex.main = 1, cex.lab = 1)
lines(x,gfunc, col = "red", lwd = 3)
# ---------Utilities -----------#
acceptanceProb <- function(x,alpha){
if (x < 1) {
return (exp(-x))
}
return (x^(alpha-1))
}
# -------------- Main function ---------------#
sampleGammaRejection <- function(alpha, n) {
xsample <- matrix(0,n,1)
for (j in 1:n){
fin <- 0
while (fin == 0){
xsample[j] <- gsample(1,alpha)
acc <- acceptanceProb(xsample[j], alpha)
u <- runif(1)
if (u <= acc){
fin = 1
}
}
}
return (xsample)
}
# Sample
alpha <- 0.75
xsample <- sampleGammaRejection(alpha, n)
#Check sampling
gammaf <- function(alpha,x){
res <- (1/gamma(alpha))*(x^(alpha-1))*exp(-x)
return(res)
}
y <- gammaf(alpha, x)
check <- data.frame(mean = mean(xsample), truemean = alpha, var = var(xsample), truevar = alpha)
print(check)
#Plot
truehist(xsample, main = "Rejection sampling", xlab = "Samples of g(x), alpha = 0.75",
xlim = range(0:3), cex.main = 1, cex.lab = 1)
lines(x,y, col = "red", lwd = 3)
# ---------- Utilities ------------ #
f_star <- function(x, alpha){
return (((alpha-1)/2)*x -exp(x)/2)
}
# ----------Main function ------------ #
sampleGammaRatioUniforms <- function(alpha, n) {
# Determine bounds on a log scale
log_a_pluss <- (alpha-1)/2 * (log(alpha-1)-1)
#log_a_minus <- -Inf
log_b_pluss <- (alpha+1)/2 * log((alpha+1)*exp(-1))
#log_b_minus <- -Inf # log of both limits...
# Iterations
count <- 1
it <- 1
xSample <- matrix(0,n,1)
# Until we have n realisations
while (it <= n) {
# Uniform sampling
log_u_1 <- log(runif(1)) + log_a_pluss
log_u_2 <- log(runif(1)) + log_b_pluss
# Change of variables
# x_2 <- log_u_1
# x_1 <- log_u_2 - log_u_1
log_x <- log_u_2 - log_u_1 #log(u2/u1)
# Acceptance
if (log_u_1 <= f_star(log_x, alpha)) {
xSample[it] <- log_x
# Increment
it <- it + 1
#print(log_u_1 - f_star(log_x, alpha)); flush.console()
count <- count + 1
}
else {
# Increment count
count <- count + 1
}
}
struct <- data.frame(xSample = exp(xSample) , count)
return (struct)
}
# ---------- Utilities ------------ #
n <- 1000 # No. of samples
alphamax <- 20
counts <- matrix(0,1,alphamax-1)
# Generating realisations for set of alphas
count_it <- 0
for (alpha in 2:alphamax) {
out <- sampleGammaRatioUniforms(alpha, n)
count_it <- count_it + 1
counts[count_it] <- out$count[1]
}
frame <- data.frame(alpha = 2:alphamax, counts = counts)
plot(2:alphamax, counts, main = "Rejection sampling: Number of iterations to achieve 1000 samples",
xlab = "Alpha", ylab = "Counts", col = "red")
# Exponential distribution
sampleExponential <- function(lambda, n){
x <- -(1/lambda)*log(runif(n))
return(x)
}
# ----- Main function: Gamma sampling -----#
sampleGamma <- function(alpha, beta, n) {
if (alpha > 1) {
xFrame <- sampleGammaRatioUniforms(alpha,n)
xSample <- xFrame$xSample
}
else if ( alpha < 1) {
xSample <- sampleGammaRejection(alpha, n)
}
else {
xSample <- sampleExponential(lambda = 1, n)
}
return (beta*xSample)
}
# -------------------- Sample Dirichlet -----------------------#
n <- 10000
K <- 3
alpha <- 1:K
zSample <- matrix(0,n,K)
dirSample <- matrix(0,n,K)
dirMean <- matrix(0,K,1)
for (i in 1:n) {
for (j in 1:K){
zSample[i, j] <- sampleGamma(alpha[j], 1, 1)
}
for (j in 1:K){
dirSample[i, j] <- zSample[i,j]/(sum(zSample[i,]))
}
}
for (j in 1:K) {
dirMean[j] <- mean(dirSample[j,])
}
# Verify marginal distributions are beta
xUni <- seq(0,1,1/n)
betaSamples_1 <- dbeta(xUni, alpha[1], sum(alpha)-alpha[1])
betaSamples_2 <- dbeta(xUni, alpha[2], sum(alpha)-alpha[2])
betaSamples_3 <- dbeta(xUni, alpha[3], sum(alpha)-alpha[3])
# Plotting
# par(mfrow=c(1,3))
truehist(dirSample[,1])
lines(xUni, betaSamples_1, col = "red", lwd = 2)
truehist(dirSample[,2])
lines(xUni, betaSamples_2, col = "red", lwd = 2)
truehist(dirSample[,3])
lines(xUni, betaSamples_3, col = "red", lwd = 2)
# -------------------- Sample Dirichlet -----------------------#
n <- 10000
K <- 3
alpha <- 1:K
zSample <- matrix(0,n,K)
dirSample <- matrix(0,n,K)
dirMean <- matrix(0,K,1)
for (i in 1:n) {
for (j in 1:K){
zSample[i, j] <- sampleGamma(alpha[j], 1, 1)
}
for (j in 1:K){
dirSample[i, j] <- zSample[i,j]/(sum(zSample[i,]))
}
}
for (j in 1:K) {
dirMean[j] <- mean(dirSample[j,])
}
# Verify marginal distributions are beta
xUni <- seq(0,1,1/n)
betaSamples_1 <- dbeta(xUni, alpha[1], sum(alpha)-alpha[1])
betaSamples_2 <- dbeta(xUni, alpha[2], sum(alpha)-alpha[2])
betaSamples_3 <- dbeta(xUni, alpha[3], sum(alpha)-alpha[3])
# Plotting
par(mfrow=c(1,3))
truehist(dirSample[,1], main = "Marginal dirichlet distribution")
lines(xUni, betaSamples_1, col = "red", lwd = 2)
truehist(dirSample[,2])
lines(xUni, betaSamples_2, col = "red", lwd = 2)
truehist(dirSample[,3])
lines(xUni, betaSamples_3, col = "red", lwd = 2)
# -------------------- Sample Dirichlet -----------------------#
n <- 10000
K <- 3
alpha <- 1:K
zSample <- matrix(0,n,K)
dirSample <- matrix(0,n,K)
dirMean <- matrix(0,K,1)
for (i in 1:n) {
for (j in 1:K){
zSample[i, j] <- sampleGamma(alpha[j], 1, 1)
}
for (j in 1:K){
dirSample[i, j] <- zSample[i,j]/(sum(zSample[i,]))
}
}
for (j in 1:K) {
dirMean[j] <- mean(dirSample[j,])
}
# Verify marginal distributions are beta
xUni <- seq(0,1,1/n)
betaSamples_1 <- dbeta(xUni, alpha[1], sum(alpha)-alpha[1])
betaSamples_2 <- dbeta(xUni, alpha[2], sum(alpha)-alpha[2])
betaSamples_3 <- dbeta(xUni, alpha[3], sum(alpha)-alpha[3])
# Plotting
par(mfrow=c(1,3))
truehist(dirSample[,1], main = "Marginal dirichlet distributions", xlab = "")
lines(xUni, betaSamples_1, col = "red", lwd = 2)
truehist(dirSample[,2], xlab = "")
lines(xUni, betaSamples_2, col = "red", lwd = 2)
truehist(dirSample[,3], xlab = "")
lines(xUni, betaSamples_3, col = "red", lwd = 2)
# Birthdays
sim <- 10000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
prob <- count/sim
print(prob)
# Birthdays
sim <- 100000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
prob <- count/sim
print(prob)
# Birthdays
sim <- 1000000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
# Birthdays
sim <- 100000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
prob <- count/sim
print(prob)
# Birthdays
sim <- 100000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
prob <- count/sim
print(prob)
# Birthdays
sim <- 100000
stud <- 35
count <- 0
for (i in 1:sim){
bdays <- round(runif(stud)*365)
if (sum(duplicated(bdays))>=1){
count <- count + 1
}
}
prob <- count/sim
print(prob)
# Sample posterior distribution of q
n <- 10000
K <- 4
alpha <- c(55+0.5,57+0.5,48+0.5,40+0.5)
zSample <- matrix(0,n,K)
dirSample <- matrix(0,n,K)
dirMean <- matrix(0,K,1)
for (i in 1:n) {
for (j in 1:K){
zSample[i, j] <- sampleGamma(alpha[j], 1, 1)
}
for (j in 1:K){
dirSample[i, j] <- zSample[i,j]/(sum(zSample[i,]))
}
}
for (j in 1:K) {
dirMean[j] <- mean(dirSample[j,])
}
# Verify marginal distributions are beta
xUni <- seq(0,1,1/n)
betaSamples_1 <- dbeta(xUni, alpha[1], sum(alpha)-alpha[1])
betaSamples_2 <- dbeta(xUni, alpha[2], sum(alpha)-alpha[2])
betaSamples_3 <- dbeta(xUni, alpha[3], sum(alpha)-alpha[3])
betaSamples_4 <- dbeta(xUni, alpha[4], sum(alpha)-alpha[4])
# Plotting
par(mfrow=c(2,2))
truehist(dirSample[,1], main ="Marginal posterior distribution of q_1", xlab = "")
lines(xUni, betaSamples_1, col = "red", lwd = 2)
truehist(dirSample[,2], main = "Marginal posterior distribution of q_2", xlab = "")
lines(xUni, betaSamples_2, col = "red", lwd = 2)
truehist(dirSample[,3], main = "Marginal posterior distribution of q_3", xlab = "")
lines(xUni, betaSamples_3, col = "red", lwd = 2)
truehist(dirSample[,4], main = "Marginal posterior distribution of q_4", xlab = "")
lines(xUni, betaSamples_4, col = "red", lwd = 2)
sampleBeta <- function(alpha, beta, n){
Y <- sampleGamma(alpha, beta = 1,n)
Z <- sampleGamma(alpha = beta, beta = 1, n)
xsample <- Y/(Y+Z)
}
# -------------- Multinomial sampling -----------------#
# Input:
# p : Sorted list of probabilities summing to unity.
# N : Number of draws
# Output:
# out: vector of draws corresponding to each interval
sampleMultinomial <- function(p, N) {
len_p <- length(p)
# Compute cumulative sum
cumSum <- matrix(0,len_p, 1)
cumSum[1] <- p[1]
for (i in 2:len_p) {
cumSum[i] <- cumSum[i-1] + p[i]
}
u <- runif(N)
# Increment output draws
out <- matrix(0, len_p, 1)
for (i in 1:N) {
for (j in 1:len_p) {
if (u[i] < cumSum[j]) {
out[j] <- out[j] + 1
break
}
}
}
return (out)
}
# ----------------------------- Sample posterior means, 95 % confidence -----------------------------#
findIndex <- function(vec){
for (i in 1:length(vec)) {
if (vec[i] == 1) {
return (i)
}
}
return(-1)
}
calcP <- function(weights, N, K) {
# Choose random season
u <- runif(1)
p <- c(0.25, 0.5, 0.75, 1.0)
out <- sampleMultinomial(p, 1)
index <- findIndex(out)
temp <- weights[index] * factorial(K[index]) / factorial(K[index]-N[index]) * 1 / K[index]^N[index]
return (1 - temp)
}
samplePosterior <- function(p, students, draws, daysInSeason) {
post <- matrix(0, draws, 1)
out <- matrix(1, length(p),1)
# For efficiency
#p <- sort(p, ndex.return = FALSE)
for (i in 1:draws){
out <- sampleMultinomial(p, students)
post[i] <- calcP(p, out, daysInSeason)
}
return (post)
}
computePosteriorMeans <- function(p, students, draws, daysInSeason) {
post <- samplePosterior(p, students, draws, daysInSeason)
return (post)
}
students <- 35
draws <- 100000
daysInSeason <- matrix(c(92, 92, 91, 90))
p <- matrix(c(92 / 365, 92 / 365, 91 / 365, 92 / 365))
means <- computePosteriorMeans(p, students, draws, daysInSeason)
means_sorted <- sort(means)
truehist(means_sorted[2500:97500])
truehist(means_sorted[2500:97500], breaks = 2)
students <- 35
draws <- 100000
daysInSeason <- matrix(c(92, 92, 91, 90))
p <- matrix(c(92 / 365, 92 / 365, 91 / 365, 92 / 365))
means <- computePosteriorMeans(p, students, draws, daysInSeason)
means_sorted <- sort(means)
truehist(means_sorted[2500:97500])
meanframe <- data.frame(means_sorted)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..))
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.1)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.01)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.001)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.01)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.02)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.03)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.025)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.45)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.01)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.02)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.15)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.015)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.016)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0155)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0152)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.015)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan")
meanframe <- data.frame(means_sorted[2500:97500])
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.01, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.012, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.01, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.014, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.015, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5)
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + lab(xlab = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labels(xlab = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labels(xlab = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(xlab = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(xlab = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(x = "Values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(x = "Values for p", y = "")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(x = "Values for p", y = "", main = "Histogram of means of estimated values for p")
ggplot(meanframe) + geom_histogram(aes(x = meanframe, y = ..density..), binwidth = 0.0151, col = "black", fill = "cyan", alpha = 0.5) + labs(x = "Values for p", y = "", title = "Histogram of means of estimated values for p")
# ---------- Utilities ------------ #
n <- 1000 # No. of samples
alphamax <- 2000
counts <- matrix(0,1,alphamax-1)
# Generating realisations for set of alphas
count_it <- 0
for (alpha in 2:alphamax) {
out <- sampleGammaRatioUniforms(alpha, n)
count_it <- count_it + 1
counts[count_it] <- out$count[1]
}
frame <- data.frame(alpha = 2:alphamax, counts = counts)
plot(2:alphamax, counts, main = "Rejection sampling: Number of iterations to achieve 1000 samples",
xlab = "Alpha", ylab = "Counts", col = "red")
frame <- data.frame(alpha = 2:alphamax, counts = counts)
plot(2:alphamax, counts, main = "Rejection sampling: Number of iterations to achieve 1000 samples",
xlab = "Alpha", ylab = "Counts")
